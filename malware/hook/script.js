Java.perform(()=>{

	let clazz = Java.use("q2.a");
	
	clazz.b.implmentation = function(s1,s2){
		console.log(`[+]function called {s1} {s2}`);
		let result = this.b(s1,s2);
		console.log(`[+]return is {result}`);
		return result;
	}
	
	let C0091a = Java.use("v2.a$a");
	C0091a["d"].overload().implementation = function () {
		console.log(`C0091a.d is called`);
		let result = this["d"]();
		console.log(`C0091a.d result=${result}`);
		return Java.use("java.lang.Boolean").$new(false);
	};
	
	let a = Java.use("v2.a");
	a["a"].implementation = function (context) {
		console.log(`a.a is called: context=${context}`);
		let result = this["a"](context);
		console.log(`a.a result=${result}`);
		return false;
	};
	

	a["b"].implementation = function (context) {
    console.log(`a.b is called: context=${context}`);
    let result = this["b"](context);
    console.log(`a.b result=${result}`);
    return Java.use("java.lang.Boolean").$new(false);
	};
	

    a["c"].implementation = function (context) {
        console.log(`a.c is called: context=${context}`);
        let result = this["c"](context);
        console.log(`a.c result=${result}`);
        return Java.use("java.lang.Boolean").$new(false);
    };



    a["d"].implementation = function (context) {
        console.log(`a.d is called: context=${context}`);
        let result = this["d"](context);
        console.log(`a.d result=${result}`);
        return Java.use("java.lang.Boolean").$new(false);
    };


    a["e"].implementation = function (context) {
        console.log(`a.e is called: context=${context}`);
        let result = this["e"](context);
        console.log(`a.e result=${result}`);
        return false;
    };


    a["f"].implementation = function () {
        console.log(`a.f is called`);
        let result = this["f"]();
        console.log(`a.f result=${result}`);
        return false;
    };


    a["g"].implementation = function (context) {
        console.log(`a.g is called: context=${context}`);
        let result = this["g"](context);
        console.log(`a.g result=${result}`);
        return false;
    };


    clazz["c"].implementation = function (str, str2) {
        console.log(`a.c is called: str=${str}, str2=${str2}`);
        let result = this["c"](str, str2);
        console.log(`a.c result=${result}`);
        return result;
    };

})
